{"version":3,"sources":["src/server/compiler/AppCompiler.ts"],"names":[],"mappings":"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","file":"AppCompiler.js","sourcesContent":["import * as path from 'path';\n\nimport { App } from '../../definition/App';\nimport { AppMethod } from '../../definition/metadata';\nimport { AppAccessors } from '../accessors';\nimport { AppManager } from '../AppManager';\nimport { MustContainFunctionError } from '../errors';\nimport { AppConsole } from '../logging';\nimport { ProxiedApp } from '../ProxiedApp';\nimport { getRuntime } from '../runtime';\nimport { buildCustomRequire } from '../runtime/require';\nimport { IAppStorageItem } from '../storage';\nimport { IParseAppPackageResult } from './IParseAppPackageResult';\n\nexport class AppCompiler {\n    public normalizeStorageFiles(files: { [key: string]: string }): { [key: string]: string } {\n        const result: { [key: string]: string } = {};\n\n        Object.entries(files).forEach(([name, content]) => {\n            result[name.replace(/\\$/g, '.')] = content;\n        });\n\n        return result;\n    }\n\n    public toSandBox(manager: AppManager, storage: IAppStorageItem, { files }: IParseAppPackageResult): ProxiedApp {\n        if (typeof files[path.normalize(storage.info.classFile)] === 'undefined') {\n            throw new Error(`Invalid App package for \"${ storage.info.name }\". ` +\n                `Could not find the classFile (${ storage.info.classFile }) file.`);\n        }\n\n        const Runtime = getRuntime();\n\n        const customRequire = buildCustomRequire(files, storage.info.id);\n        const result = Runtime.runCode(files[path.normalize(storage.info.classFile)], {\n            require: customRequire,\n        });\n\n        if (typeof result !== 'function') {\n            // tslint:disable-next-line:max-line-length\n            throw new Error(`The App's main class for ${ storage.info.name } is not valid (\"${ storage.info.classFile }\").`);\n        }\n        const appAccessors = new AppAccessors(manager, storage.info.id);\n        const logger = new AppConsole(AppMethod._CONSTRUCTOR);\n        const rl = Runtime.runCode('exports.app = new App(info, rcLogger, appAccessors);', {\n            rcLogger: logger,\n            info: storage.info,\n            App: result,\n            appAccessors,\n        }, { timeout: 1000, filename: `App_${ storage.info.nameSlug }.js` });\n\n        // TODO: app is importing the Class App internally so it's not same object to compare. Need to find a way to make this test\n        // if (!(rl instanceof App)) {\n        //     throw new MustExtendAppError();\n        // }\n\n        if (typeof rl.getName !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getName');\n        }\n\n        if (typeof rl.getNameSlug !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getNameSlug');\n        }\n\n        if (typeof rl.getVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getVersion');\n        }\n\n        if (typeof rl.getID !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getID');\n        }\n\n        if (typeof rl.getDescription !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getDescription');\n        }\n\n        if (typeof rl.getRequiredApiVersion !== 'function') {\n            throw new MustContainFunctionError(storage.info.classFile, 'getRequiredApiVersion');\n        }\n\n        // TODO: Fix this type cast from to any to the right one\n        const app = new ProxiedApp(manager, storage, rl as App, new Runtime(rl as App, customRequire as any));\n\n        manager.getLogStorage().storeEntries(app.getID(), logger);\n\n        return app;\n    }\n}\n"]}