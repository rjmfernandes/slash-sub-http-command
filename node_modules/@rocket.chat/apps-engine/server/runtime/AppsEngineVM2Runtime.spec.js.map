{"version":3,"sources":["src/server/runtime/AppsEngineVM2Runtime.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,uCAQkB;AAElB,iEAA8D;AAG9D,IAAa,+BAA+B,GAA5C,MAAa,+BAA+B;IAA5C;QACY,QAAG,GAAG;YACV,OAAO,EAAE,GAAG,EAAE,CAAC,UAAU;SAC5B,CAAC;IAwFN,CAAC;IArFU,YAAY,KAAI,CAAC;IAGjB,KAAK,KAAI,CAAC;IAuCV,WAAW,CAAC,GAAG,IAAS;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEzB,MAAM,MAAM,GAAG,2CAAoB,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAEpE,IAAI,MAAM,EAAE;YACR,IAAI,MAAM,YAAY,QAAQ,EAAE;gBAC5B,iBAAM,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACnC;SACJ;IACL,CAAC;IAeY,YAAY,CAAC,GAAG,IAAS;;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAEzB,MAAM,QAAQ,GAAG,IAAI,2CAAoB,CACrC,IAAI,CAAC,GAAU,EACf,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CACvB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAEnE,iBAAM,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;KAAA;CACJ,CAAA;AArFG;IADC,uBAAY;;;;mEACW;AAGxB;IADC,gBAAK;;;;4DACW;AAuCjB;IArCC,mBAAQ,CACL,4DAA4D,EAC5D,EAAE,WAAW,EAAE,IAAI,EAAE,EACrB;QACI,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,aAAa;QACvB,gBAAgB,EAAE,IAAI;KACzB,EACD,wBAAwB,CAC3B;IACA,mBAAQ,CACL,yEAAyE,EACzE,IAAI,EACJ;QACI,OAAO,EAAE,EAAE;QACX,gBAAgB,EAAE,KAAK;KAC1B,EACD,yBAAyB,CAC5B;IACA,mBAAQ,CACL,4DAA4D,EAC5D,EAAE,WAAW,EAAE,IAAI,EAAE,EACrB,IAAI,EACJ,wBAAwB,CAC3B;IACA,mBAAQ,CACL,6DAA6D,EAC7D,IAAI,EACJ,IAAI,CACP;IACA,mBAAQ,CACL,4DAA4D,EAC5D,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,EAC3B,IAAI,EACJ,yBAAyB,CAC5B;IACA,eAAI,CAAC,8BAA8B,CAAC;;;;kEAcpC;AAeD;IAbC,mBAAQ,CACL,iDAAiD,EACjD,EAAE,WAAW,EAAE,IAAI,EAAE,EACrB;QACI,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,aAAa;QACvB,gBAAgB,EAAE,IAAI;KACzB,EACD,aAAa,CAChB;IACA,oBAAS,CACN,iEAAiE,CACpE;;;;mEAeA;AA1FQ,+BAA+B;IAD3C,sBAAW,CAAC,sBAAsB,CAAC;GACvB,+BAA+B,CA2F3C;AA3FY,0EAA+B","file":"AppsEngineVM2Runtime.spec.js","sourcesContent":["import {\n    AsyncTest,\n    Expect,\n    Setup,\n    SetupFixture,\n    Test,\n    TestCase,\n    TestFixture,\n} from 'alsatian';\nimport { App } from '../../definition/App';\nimport { AppsEngineVM2Runtime } from './AppsEngineVM2Runtime';\n\n@TestFixture('AppsEngineVM2Runtine')\nexport class AppsEngineVM2RuntineTestFixture {\n    private app = {\n        getName: () => 'app-name',\n    };\n\n    @SetupFixture\n    public setupFixture() {}\n\n    @Setup\n    public setup() {}\n\n    @TestCase(\n        `module.exports = () => { return 'Hello World First case'};`,\n        { someSandbox: true },\n        {\n            timeout: 10,\n            filename: 'filename.ts',\n            returnAllExports: true,\n        },\n        'Hello World First case',\n    )\n    @TestCase(\n        `module.exports = { method: () => { return 'Hello World Second case' } }`,\n        null,\n        {\n            timeout: 10,\n            returnAllExports: false,\n        },\n        'Hello World Second case',\n    )\n    @TestCase(\n        `module.exports = () => { return 'Hello World Third case'};`,\n        { someSandbox: true },\n        null,\n        'Hello World Third case',\n    )\n    @TestCase(\n        `module.exports = () => { return 'Hello World Fourth case'};`,\n        null,\n        null,\n    )\n    @TestCase(\n        `module.exports = () => { return 'Hello World Fifth case'};`,\n        { require: () => 'module' },\n        null,\n        'Hello World Fourth case',\n    )\n    @Test('AppsEngineVM2Runtime.runCode')\n    public runCodeTest(...args: any) {\n        const code = args[0];\n        const sandbox = args[1];\n        const options = args[2];\n        const response = args[3];\n\n        const result = AppsEngineVM2Runtime.runCode(code, sandbox, options);\n\n        if (result) {\n            if (result instanceof Function) {\n                Expect(result()).toBe(response);\n            }\n        }\n    }\n\n    @TestCase(\n        `module.exports = () => { return 'Hello World'};`,\n        { someSandbox: true },\n        {\n            timeout: 10,\n            filename: 'filename.ts',\n            returnAllExports: true,\n        },\n        'Hello World',\n    )\n    @AsyncTest(\n        'new AppsEngineVM2Runtime().runInSandbox(code, sandbox, options)',\n    )\n    public async runInSandbox(...args: any) {\n        const code = args[0];\n        const sandbox = args[1];\n        const options = args[2];\n        const response = args[3];\n\n        const instance = new AppsEngineVM2Runtime(\n            this.app as App,\n            (mod: string) => mod,\n        );\n\n        const result = await instance.runInSandbox(code, sandbox, options);\n\n        Expect(result()).toBe(response);\n    }\n}\n"]}