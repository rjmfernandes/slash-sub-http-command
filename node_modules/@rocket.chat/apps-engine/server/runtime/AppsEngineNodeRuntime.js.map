{"version":3,"sources":["src/server/runtime/AppsEngineNodeRuntime.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iCAAiC;AACjC,yBAAyB;AAGzB,2DAA2I;AAE3I,MAAa,qBAAsB,SAAQ,qCAAiB;IAoBxD,YAA6B,GAAQ,EAAmB,aAAmC;QACvF,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QADD,QAAG,GAAH,GAAG,CAAK;QAAmB,kBAAa,GAAb,aAAa,CAAsB;IAE3F,CAAC;IAVM,MAAM,CAAC,OAAO,CAAC,IAAY,EAAE,OAA6B,EAAE,OAAmC;QAClG,OAAO,EAAE,CAAC,eAAe,CACrB,IAAI,kCACC,qBAAqB,CAAC,cAAc,GAAK,OAAO,mCAChD,qBAAqB,CAAC,qBAAqB,GAAK,OAAO,IAAI,EAAE,EACrE,CAAC;IACN,CAAC;IAMY,YAAY,CAAC,IAAY,EAAE,OAA6B,EAAE,OAAmC;;YACtG,OAAO,aAAP,OAAO,cAAP,OAAO,IAAP,OAAO,GAAK,EAAE,EAAC;YAEf,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,IAAI,gDACrC,qBAAqB,CAAC,cAAc,GACpC,OAAO,KACV,OAAO,EAAE,IAAI,CAAC,aAAa,qCAExB,qBAAqB,CAAC,qBAAqB,KAC9C,QAAQ,EAAE,qCAAiB,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,IACtE,CAAC;YAEH,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;;AArCL,sDAsCC;AArCiB,2CAAqB,GAAG;IAClC,OAAO,EAAE,uDAAmC;CAC/C,CAAC;AAEY,oCAAc,mCACrB,MAAM,KACT,MAAM;IACN,OAAO,EACP,OAAO,EAAE,EAAE,EACX,OAAO,EAAE,EAAE,IACb","file":"AppsEngineNodeRuntime.js","sourcesContent":["import * as timers from 'timers';\nimport * as vm from 'vm';\n\nimport { App } from '../../definition/App';\nimport { APPS_ENGINE_RUNTIME_DEFAULT_TIMEOUT, AppsEngineRuntime, getFilenameForApp, IAppsEngineRuntimeOptions } from './AppsEngineRuntime';\n\nexport class AppsEngineNodeRuntime extends AppsEngineRuntime {\n    public static defaultRuntimeOptions = {\n        timeout: APPS_ENGINE_RUNTIME_DEFAULT_TIMEOUT,\n    };\n\n    public static defaultContext = {\n        ...timers,\n        Buffer,\n        console,\n        process: {},\n        exports: {},\n    };\n    public static runCode(code: string, sandbox?: Record<string, any>, options?: IAppsEngineRuntimeOptions): any {\n        return vm.runInNewContext(\n            code,\n            { ...AppsEngineNodeRuntime.defaultContext, ...sandbox },\n            { ...AppsEngineNodeRuntime.defaultRuntimeOptions, ...options || {} },\n        );\n    }\n\n    constructor(private readonly app: App, private readonly customRequire: (mod: string) => any) {\n        super(app, customRequire);\n    }\n\n    public async runInSandbox(code: string, sandbox?: Record<string, any>, options?: IAppsEngineRuntimeOptions): Promise<any> {\n        sandbox ??= {};\n\n        const result = await vm.runInNewContext(code, {\n            ...AppsEngineNodeRuntime.defaultContext,\n            ...sandbox,\n            require: this.customRequire,\n        }, {\n            ...AppsEngineNodeRuntime.defaultRuntimeOptions,\n            filename: getFilenameForApp(options?.filename || this.app.getName()),\n        });\n\n        return result;\n    }\n}\n"]}