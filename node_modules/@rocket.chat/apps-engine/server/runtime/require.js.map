{"version":3,"sources":["src/server/runtime/require.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,wBAA+B;AAE/B,iDAAkF;AAElF;;;GAGG;AACH,SAAgB,uCAAuC,CAAC,UAAkB;IACtE,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;AACzF,CAAC;AAFD,0FAEC;AAED,SAAgB,+BAA+B,CAAC,UAAkB;IAC9D,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;AACzF,CAAC;AAFD,0EAEC;AAED,SAAgB,4BAA4B,CAAC,UAAkB;IAC3D,OAAO,UAAU,IAAI,gCAAsB,CAAC;AAChD,CAAC;AAFD,oEAEC;AAED,SAAgB,kBAAkB,CAAC,KAA8B,EAAE,KAAa,EAAE,cAAsB,GAAG;IACvG,OAAO,SAAS,SAAS,CAAC,GAAW,EAAE,QAAa;QAChD,4DAA4D;QAC5D,IAAI,GAAG,CAAC,UAAU,CAAC,kCAAkC,CAAC,EAAE;YACpD,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC1B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,kCAAkC,EAAE,mBAAmB,CAAC,CAAC;YAC3E,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;SACvB;QAED,IAAI,GAAG,CAAC,UAAU,CAAC,sCAAsC,CAAC,EAAE;YACxD,IAAI,QAAQ,EAAE;gBACV,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACxB;YACD,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC1B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,sCAAsC,EAAE,mBAAmB,CAAC,CAAC;YAC/E,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;SACvB;QAED,IAAI,4BAA4B,CAAC,GAAG,CAAC,EAAE;YACnC,+FAA+F;YAC/F,OAAO,6BAAmB,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;SACpD;QAED,IAAI,WAAW,KAAK,GAAG,EAAE;YACrB,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;SACrC;QAED,MAAM,iBAAiB,GAAG,+BAA+B,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,cAAc,GAAG,uCAAuC,CAAC,GAAG,CAAC,CAAC;QAEpE,MAAM,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC;QAEnH,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO;SACV;QAED,MAAM,OAAO,GAAG,aAAU,EAAE,CAAC;QAE7B,kCAAkC;QAClC,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YACpC,OAAO,EAAE,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC;SAC1E,EAAE;YACC,gBAAgB,EAAE,IAAI;YACtB,QAAQ;SACX,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAjDD,gDAiDC","file":"require.js","sourcesContent":["import * as path from 'path';\nimport { getRuntime } from '.';\n\nimport { AllowedInternalModules, requireNativeModule } from '../compiler/modules';\n\n/**\n * Keeps compatibility with apps compiled and stored in the database\n * with previous Apps-Engine versions\n */\nexport function transformFallbackModuleForCustomRequire(moduleName: string): string {\n    return path.normalize(moduleName).replace(/\\.\\.?\\//g, '').replace(/^\\//, '') + '.ts';\n}\n\nexport function transformModuleForCustomRequire(moduleName: string): string {\n    return path.normalize(moduleName).replace(/\\.\\.?\\//g, '').replace(/^\\//, '') + '.js';\n}\n\nexport function allowedInternalModuleRequire(moduleName: string): moduleName is AllowedInternalModules {\n    return moduleName in AllowedInternalModules;\n}\n\nexport function buildCustomRequire(files: { [s: string]: string }, appId: string, currentPath: string = '.'): (mod: string, require: any) => {} {\n    return function _requirer(mod: string, requirer: any) {\n        // Keep compatibility with apps importing apps-ts-definition\n        if (mod.startsWith('@rocket.chat/apps-ts-definition/')) {\n            if (requirer) {\n                return requirer(mod);\n            }\n            mod = path.normalize(mod);\n            mod = mod.replace('@rocket.chat/apps-ts-definition/', '../../definition/');\n            return require(mod);\n        }\n\n        if (mod.startsWith('@rocket.chat/apps-engine/definition/')) {\n            if (requirer) {\n                return requirer(mod);\n            }\n            mod = path.normalize(mod);\n            mod = mod.replace('@rocket.chat/apps-engine/definition/', '../../definition/');\n            return require(mod);\n        }\n\n        if (allowedInternalModuleRequire(mod)) {\n            // TODO: Need to use the vm2 require in this function and evaluate the necessity of the proxies\n            return requireNativeModule(mod, appId, requirer);\n        }\n\n        if (currentPath !== '.') {\n            mod = path.join(currentPath, mod);\n        }\n\n        const transformedModule = transformModuleForCustomRequire(mod);\n        const fallbackModule = transformFallbackModuleForCustomRequire(mod);\n\n        const filename = files[transformedModule] ? transformedModule : files[fallbackModule] ? fallbackModule : undefined;\n\n        if (!filename) {\n            return;\n        }\n\n        const Runtime = getRuntime();\n\n        // TODO: specify correct file name\n        return Runtime.runCode(files[filename], {\n            require: buildCustomRequire(files, appId, path.dirname(filename) + '/'),\n        }, {\n            returnAllExports: true,\n            filename,\n        });\n    };\n}\n"]}