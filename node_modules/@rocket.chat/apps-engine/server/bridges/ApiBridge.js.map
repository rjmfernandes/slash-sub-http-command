{"version":3,"sources":["src/server/bridges/ApiBridge.ts"],"names":[],"mappings":";;;AAAA,2EAAwE;AAExE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,SAAU,SAAQ,uBAAU;IACxC,aAAa,CAAC,GAAW,EAAE,KAAa;QAC3C,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACvC;IACJ,CAAC;IAEK,gBAAgB,CAAC,KAAa;QACjC,IAAI,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SACrC;IACJ,CAAC;IAiBO,oBAAoB,CAAC,KAAa;QACtC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CAAC,IAAI,6CAAqB,CAAC;YAC5D,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC;SACpD,CAAC,CAAC,CAAC;QAEJ,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAxCD,8BAwCC","file":"ApiBridge.js","sourcesContent":["import { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppApi } from '../managers/AppApi';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class ApiBridge extends BaseBridge {\n   public doRegisterApi(api: AppApi, appId: string): void {\n       if (this.hasDefaultPermission(appId)) {\n           return this.registerApi(api, appId);\n       }\n    }\n\n   public doUnregisterApis(appId: string): void {\n       if (this.hasDefaultPermission(appId)) {\n           return this.unregisterApis(appId);\n       }\n    }\n\n    /**\n     * Registers an api with the system which is being bridged.\n     *\n     * @param api the api to register\n     * @param appId the id of the app calling this\n     */\n    protected abstract registerApi(api: AppApi, appId: string): void;\n\n    /**\n     * Unregisters all provided api's of an app from the bridged system.\n     *\n     * @param appId the id of the app calling this\n     */\n    protected abstract unregisterApis(appId: string): void;\n\n    private hasDefaultPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.apis.default)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(new PermissionDeniedError({\n            appId,\n            missingPermissions: [AppPermissions.apis.default],\n        }));\n\n        return false;\n    }\n}\n"]}