{"version":3,"sources":["src/server/bridges/ServerSettingBridge.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2EAAwE;AACxE,2EAAwE;AACxE,kEAA+D;AAC/D,6CAA0C;AAE1C,MAAsB,mBAAoB,SAAQ,uBAAU;IAC5C,QAAQ,CAAC,KAAa;;YAC/B,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC7B;QACJ,CAAC;KAAA;IAEW,YAAY,CAAC,EAAU,EAAE,KAAa;;YAC/C,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACrC;QACJ,CAAC;KAAA;IAEW,WAAW,CAAC,IAAY,EAAE,KAAa;;YAChD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACtC;QACJ,CAAC;KAAA;IAEW,aAAa,CAAC,EAAU,EAAE,KAAa;;YAChD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACtC;QACJ,CAAC;KAAA;IAEW,gBAAgB,CAAC,EAAU,EAAE,KAAa;;YACnD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;aACzC;QACJ,CAAC;KAAA;IAEW,WAAW,CAAC,OAAiB,EAAE,KAAa;;YACrD,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACzC;QACJ,CAAC;KAAA;IAEY,gBAAgB,CAAC,EAAkB,EAAE,KAAa,EAAE,KAAa;;YAC1E,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;IAUO,kBAAkB,CAAC,KAAa;QACpC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CAAC,IAAI,6CAAqB,CAAC;YAC5D,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,KAAK,CAAC;SACrD,CAAC,CAAC,CAAC;QAEJ,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,iBAAiB,CAAC,KAAa;QACnC,IAAI,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxE,OAAO,IAAI,CAAC;SACf;QAED,2CAAoB,CAAC,gBAAgB,CAAC,IAAI,6CAAqB,CAAC;YAC5D,KAAK;YACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC;SACpD,CAAC,CAAC,CAAC;QAEJ,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA5ED,kDA4EC","file":"ServerSettingBridge.js","sourcesContent":["import { ISetting } from '../../definition/settings';\nimport { PermissionDeniedError } from '../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../managers/AppPermissionManager';\nimport { AppPermissions } from '../permissions/AppPermissions';\nimport { BaseBridge } from './BaseBridge';\n\nexport abstract class ServerSettingBridge extends BaseBridge {\n   public async doGetAll(appId: string): Promise<Array<ISetting>> {\n       if (this.hasReadPermission(appId)) {\n           return this.getAll(appId);\n       }\n    }\n\n   public async doGetOneById(id: string, appId: string): Promise<ISetting> {\n       if (this.hasReadPermission(appId)) {\n           return this.getOneById(id, appId);\n       }\n    }\n\n   public async doHideGroup(name: string, appId: string): Promise<void> {\n       if (this.hasWritePermission(appId)) {\n           return this.hideGroup(name, appId);\n       }\n    }\n\n   public async doHideSetting(id: string, appId: string): Promise<void> {\n       if (this.hasWritePermission(appId)) {\n           return this.hideSetting(id, appId);\n       }\n    }\n\n   public async doIsReadableById(id: string, appId: string): Promise<boolean> {\n       if (this.hasReadPermission(appId)) {\n           return this.isReadableById(id, appId);\n       }\n    }\n\n   public async doUpdateOne(setting: ISetting, appId: string): Promise<void> {\n       if (this.hasWritePermission(appId)) {\n           return this.updateOne(setting, appId);\n       }\n    }\n\n    public async doIncrementValue(id: ISetting['id'], value: number, appId: string): Promise<void> {\n        if (this.hasWritePermission(appId)) {\n            return this.incrementValue(id, value, appId);\n        }\n    }\n\n   protected abstract getAll(appId: string): Promise<Array<ISetting>>;\n   protected abstract getOneById(id: string, appId: string): Promise<ISetting>;\n   protected abstract hideGroup(name: string, appId: string): Promise<void>;\n   protected abstract hideSetting(id: string, appId: string): Promise<void>;\n   protected abstract isReadableById(id: string, appId: string): Promise<boolean>;\n   protected abstract updateOne(setting: ISetting, appId: string): Promise<void>;\n   protected abstract incrementValue(id: ISetting['id'], value: number, appId: string): Promise<void>;\n\n    private hasWritePermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.setting.write)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(new PermissionDeniedError({\n            appId,\n            missingPermissions: [AppPermissions.setting.write],\n        }));\n\n        return false;\n    }\n\n    private hasReadPermission(appId: string): boolean {\n        if (AppPermissionManager.hasPermission(appId, AppPermissions.setting.read)) {\n            return true;\n        }\n\n        AppPermissionManager.notifyAboutError(new PermissionDeniedError({\n            appId,\n            missingPermissions: [AppPermissions.setting.read],\n        }));\n\n        return false;\n    }\n}\n"]}