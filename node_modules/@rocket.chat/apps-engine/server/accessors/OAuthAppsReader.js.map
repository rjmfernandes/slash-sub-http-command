{"version":3,"sources":["src/server/accessors/OAuthAppsReader.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,MAAa,eAAe;IACxB,YACqB,eAAgC,EAChC,KAAa;QADb,oBAAe,GAAf,eAAe,CAAiB;QAChC,UAAK,GAAL,KAAK,CAAQ;IAC/B,CAAC;IAES,eAAe,CAAC,EAAU;;YACnC,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC;KAAA;IAEY,iBAAiB,CAAC,IAAY;;YACvC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;KAAA;CACJ;AAbD,0CAaC","file":"OAuthAppsReader.js","sourcesContent":["import { IOAuthApp } from '../../definition/accessors/IOAuthApp';\nimport { IOAuthAppsReader } from '../../definition/accessors/IOAuthAppsReader';\nimport { OAuthAppsBridge } from '../bridges/OAuthAppsBridge';\n\nexport class OAuthAppsReader implements IOAuthAppsReader {\n    constructor(\n        private readonly oauthAppsBridge: OAuthAppsBridge,\n        private readonly appId: string,\n    ) {}\n\n    public async getOAuthAppById(id: string): Promise<IOAuthApp> {\n        return this.oauthAppsBridge.doGetByid(id, this.appId);\n    }\n\n    public async getOAuthAppByName(name: string): Promise<Array<IOAuthApp>> {\n        return this.oauthAppsBridge.doGetByName(name, this.appId);\n    }\n}\n"]}