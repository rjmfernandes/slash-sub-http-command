{"version":3,"sources":["src/server/accessors/UploadCreator.ts"],"names":[],"mappings":";;;;;;;;;;;;AAMA,MAAa,aAAa;IACtB,YACqB,OAAmB,EACnB,KAAa;QADb,YAAO,GAAP,OAAO,CAAY;QACnB,UAAK,GAAL,KAAK,CAAQ;IAC9B,CAAC;IAEQ,YAAY,CAAC,MAAc,EAAE,UAA6B;;YAEnE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;gBAChE,UAAU,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjF;YAED,MAAM,OAAO,GAAG;gBACZ,IAAI,EAAE,UAAU,CAAC,QAAQ;gBACzB,IAAI,EAAE,MAAM,CAAC,MAAM;gBACnB,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE;gBACvB,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC7C,YAAY,EAAE,UAAU,CAAC,YAAY;aACtB,CAAC;YAEpB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACtF,CAAC;KAAA;CACJ;AAtBD,sCAsBC","file":"UploadCreator.js","sourcesContent":["import { IUploadCreator } from '../../definition/accessors';\nimport { IUpload } from '../../definition/uploads';\nimport { IUploadDescriptor } from '../../definition/uploads/IUploadDescriptor';\nimport { IUploadDetails } from '../../definition/uploads/IUploadDetails';\nimport { AppBridges } from '../bridges';\n\nexport class UploadCreator implements IUploadCreator {\n    constructor(\n        private readonly bridges: AppBridges,\n        private readonly appId: string,\n    ) { }\n\n    public async uploadBuffer(buffer: Buffer, descriptor: IUploadDescriptor): Promise<IUpload> {\n\n        if (!descriptor.hasOwnProperty('user') && !descriptor.visitorToken) {\n            descriptor.user = await this.bridges.getUserBridge().doGetAppUser(this.appId);\n        }\n\n        const details = {\n            name: descriptor.filename,\n            size: buffer.length,\n            rid: descriptor.room.id,\n            userId: descriptor.user && descriptor.user.id,\n            visitorToken: descriptor.visitorToken,\n        } as IUploadDetails;\n\n        return this.bridges.getUploadBridge().doCreateUpload(details, buffer, this.appId);\n    }\n}\n"]}