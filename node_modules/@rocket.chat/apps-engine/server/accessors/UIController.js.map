{"version":3,"sources":["src/server/accessors/UIController.ts"],"names":[],"mappings":";;;AAEA,kDAA8D;AAC9D,8GAAyJ;AAKzJ,MAAa,YAAY;IAErB,YACqB,KAAa,EAC9B,OAAmB;QADF,UAAK,GAAL,KAAK,CAAQ;QAG9B,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAC;IAChE,CAAC;IAEM,aAAa,CAAC,IAA0B,EAAE,OAA+B,EAAE,IAAW;QACzF,MAAM,kBAAkB,mCACjB,OAAO,KACV,IAAI,EAAE,4BAAoB,CAAC,UAAU,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,GACpB,CAAC;QAEF,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,yDAAsB,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrH,CAAC;IAEM,eAAe,CAAC,IAA0B,EAAE,OAA+B,EAAE,IAAW;QAC3F,MAAM,kBAAkB,mCACjB,OAAO,KACV,IAAI,EAAE,4BAAoB,CAAC,YAAY,EACvC,KAAK,EAAE,IAAI,CAAC,KAAK,GACpB,CAAC;QAEF,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,yDAAsB,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrH,CAAC;IAEM,qBAAqB,CAAC,IAAkC,EAAE,OAA+B,EAAE,IAAW;QACzG,MAAM,kBAAkB,mCACjB,OAAO,KACV,IAAI,EAAE,4BAAoB,CAAC,mBAAmB,EAC9C,KAAK,EAAE,IAAI,CAAC,KAAK,GACpB,CAAC;QAEF,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,iEAA8B,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7H,CAAC;IAEM,uBAAuB,CAAC,IAAkC,EAAE,OAA+B,EAAE,IAAW;QAC3G,MAAM,kBAAkB,mCACjB,OAAO,KACV,IAAI,EAAE,4BAAoB,CAAC,qBAAqB,EAChD,KAAK,EAAE,IAAI,CAAC,KAAK,GACpB,CAAC;QAEF,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,iEAA8B,CAAC,IAAI,EAAE,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7H,CAAC;IAEM,YAAY,CAAC,gBAA6C,EAAE,OAA+B,EAAE,IAAW;QAC3G,MAAM,kBAAkB,mCACjB,OAAO,KACV,IAAI,EAAE,4BAAoB,CAAC,MAAM,EACjC,KAAK,EAAE,IAAI,CAAC,KAAK,GACpB,CAAC;QAEF,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,yDAAsB,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACjI,CAAC;CACJ;AA1DD,oCA0DC","file":"UIController.js","sourcesContent":["import { IUIController } from '../../definition/accessors';\nimport { IUIKitErrorInteractionParam, IUIKitInteractionParam } from '../../definition/accessors/IUIController';\nimport { UIKitInteractionType } from '../../definition/uikit';\nimport { formatContextualBarInteraction, formatErrorInteraction, formatModalInteraction } from '../../definition/uikit/UIKitInteractionPayloadFormatter';\nimport { IUIKitContextualBarViewParam, IUIKitModalViewParam } from '../../definition/uikit/UIKitInteractionResponder';\nimport { IUser } from '../../definition/users';\nimport { AppBridges, UiInteractionBridge } from '../bridges';\n\nexport class UIController implements IUIController {\n    private readonly uiInteractionBridge: UiInteractionBridge;\n    constructor(\n        private readonly appId: string,\n        bridges: AppBridges,\n    ) {\n        this.uiInteractionBridge = bridges.getUiInteractionBridge();\n    }\n\n    public openModalView(view: IUIKitModalViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.MODAL_OPEN,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatModalInteraction(view, interactionContext), this.appId);\n    }\n\n    public updateModalView(view: IUIKitModalViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.MODAL_UPDATE,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatModalInteraction(view, interactionContext), this.appId);\n    }\n\n    public openContextualBarView(view: IUIKitContextualBarViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.CONTEXTUAL_BAR_OPEN,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatContextualBarInteraction(view, interactionContext), this.appId);\n    }\n\n    public updateContextualBarView(view: IUIKitContextualBarViewParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.CONTEXTUAL_BAR_UPDATE,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatContextualBarInteraction(view, interactionContext), this.appId);\n    }\n\n    public setViewError(errorInteraction: IUIKitErrorInteractionParam, context: IUIKitInteractionParam, user: IUser) {\n        const interactionContext = {\n            ...context,\n            type: UIKitInteractionType.ERRORS,\n            appId: this.appId,\n        };\n\n        return this.uiInteractionBridge.doNotifyUser(user, formatErrorInteraction(errorInteraction, interactionContext), this.appId);\n    }\n}\n"]}